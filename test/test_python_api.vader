" vim: et ts=2 sts=2 sw=2

Before:
  let t:py = has('python3') ? 'py3' : 'py'
  execute t:py 'from api import API'
  execute t:py 'str_template_api = API()'
  let t:options = '["noswapfile", "buftype=nofile", "filetype=STRTestBuf", "nobuflisted"]'
  if has('python3')
    let t:buffer_number = py3eval('str_template_api.create_buffer("Test_Buffer", ' . t:options . ')')
  else
    let t:buffer_number = pyeval('str_template_api.create_buffer("Test_Buffer", ' . t:options . ')')
  endif

After:
  Restore

Given:
  Some simple text
  with nothing much
  of importance

Execute (Check we can create new buffers):
  AssertEqual bufname(t:buffer_number), 'Test_Buffer'

Execute (Check we can clear a buffer):
  split
  execute 'buffer ' . t:buffer_number

  " Apparently Vader needs this when run from terminal
  execute t:py 'import vim'
  execute t:py 'vim.buffers[' . t:buffer_number . '][0:] = ["Testing 1"]'
  execute t:py 'vim.buffers[' . t:buffer_number . '][1:] = ["Testing 2"]'
  execute t:py 'vim.buffers[' . t:buffer_number . '][2:] = ["Testing 3"]'

  AssertEqual line('$'), 3

  quit

  execute t:py 'str_template_api.clear_buffer("Test_Buffer")'

  split
  execute 'buffer ' . t:buffer_number

  AssertEqual line('$'), 1
  AssertEqual getline(1), ''

  quit

Execute (Check we can add single lines of text to a buffer):
  execute t:py 'str_template_api.clear_buffer("Test_Buffer")'
  execute t:py 'str_template_api.prepend_buffer("Test_Buffer", "1", "Test ")'
  execute t:py 'str_template_api.append_buffer("Test_Buffer", "1", "test")'
  execute t:py 'str_template_api.prepend_buffer("Test_Buffer", "1", ["Test line 1"])'
  execute t:py 'str_template_api.append_buffer("Test_Buffer", "2", ["Test line 4"])'
  execute t:py 'str_template_api.append_buffer("Test_Buffer", "$", ["Test line 5"])'
  execute t:py 'str_template_api.prepend_buffer("Test_Buffer", "$-1", ["Test line 3"])'

  split
  execute 'buffer ' . t:buffer_number

  AssertEqual getline(1), 'Test line 1'
  AssertEqual getline(2), 'Test test'
  AssertEqual getline(3), 'Test line 3'
  AssertEqual getline(4), 'Test line 4'
  AssertEqual getline(5), 'Test line 5'

  quit

Execute (Check we can add multiple lines to a buffer):
  split
  execute 'buffer ' . t:buffer_number

  execute t:py 'str_template_api.clear_buffer("Test_Buffer")'
  execute t:py 'str_template_api.prepend_buffer("Test_Buffer", "1", ["Test line 1", "Test line 2", "Test line 3"])'

  AssertEqual getline(1), 'Test line 1'
  AssertEqual getline(2), 'Test line 2'
  AssertEqual getline(3), 'Test line 3'
  AssertEqual getline(4), ''

  execute t:py 'str_template_api.replace_buffer("Test_Buffer", "1", "3", ["TEST LINE 1", "TEST LINE 2", "TEST LINE 3"])'

  AssertEqual getline(1), 'TEST LINE 1'
  AssertEqual getline(2), 'TEST LINE 2'
  AssertEqual getline(3), 'TEST LINE 3'
  AssertEqual getline(4), ''

  quit

Execute (Check we can still edit a non-modifiable buffer):
  split
  execute 'buffer ' . t:buffer_number

  set nomodifiable

  execute t:py 'str_template_api.clear_buffer("Test_Buffer")'
  execute t:py 'str_template_api.prepend_buffer("Test_Buffer", "1", ["Test line 1", "Test line 2", "Test line 3"])'

  AssertEqual getline(1), 'Test line 1'
  AssertEqual getline(2), 'Test line 2'
  AssertEqual getline(3), 'Test line 3'
  AssertEqual getline(4), ''

  AssertEqual &modifiable, 0

  quit
